<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>细数惭愧的博客</title>
  
  <subtitle>Python笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/xuejing1348748844/xuejing1348748844.github.io.git/"/>
  <updated>2020-07-11T15:11:30.284Z</updated>
  <id>https://github.com/xuejing1348748844/xuejing1348748844.github.io.git/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python作业</title>
    <link href="https://github.com/xuejing1348748844/xuejing1348748844.github.io.git/2020/07/08/Python%E4%BD%9C%E4%B8%9A/"/>
    <id>https://github.com/xuejing1348748844/xuejing1348748844.github.io.git/2020/07/08/Python%E4%BD%9C%E4%B8%9A/</id>
    <published>2020-07-08T13:56:45.000Z</published>
    <updated>2020-07-11T15:11:30.284Z</updated>
    
    <content type="html"><![CDATA[<p>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////<br>【打激素的数组 1】<br>0. 列表都可以存放一些什么东西？<br>  答：大部分类型都可以放。</p><ol><li><p>向列表增加元素有哪些方法？<br>答：append(),extend([列表])。</p></li><li><p>append() 方法和 extend() 方法都是向列表的末尾增加元素，请问他们有什么区别？<br>答：append()：只能添加一个，extend():只能添加另一个数组，等于合并两个数组</p></li><li><p>member.append([‘竹林小溪’, ‘Crazy迷恋’]) 和 member.extend([‘竹林小溪’, ‘Crazy迷恋’]) 实现的效果一样吗？<br>答：append():会把名称所有的标点符号一起添加进去<br>   extend():只添加括号内的内容，不会吧所有的标点符号都加进去</p></li><li><p>有列表 name = [‘F’, ‘i’, ‘h’, ‘C’]，如果小甲鱼想要在元素 ‘i’ 和 ‘h’ 之间插入元素 ‘s’，应该使用什么方法来插入<br>答：插入元素函数：insert(位置，内容)。 </p></li></ol><ol start="0"><li>自己动手试试看，并分析在这种情况下，向列表添加数据应当采用哪种方法比较好？</li></ol><p>假设给定以下列表：</p><p>member = [‘小甲鱼’, ‘黑夜’, ‘迷途’, ‘怡静’, ‘秋舞斜阳’]</p><p>要求将列表修改为：</p><p>member = [‘小甲鱼’, 88, ‘黑夜’, 90, ‘迷途’, 85, ‘怡静’, 90, ‘秋舞斜阳’, 88]</p><p>方法一：使用 insert() 和 append() 方法修改列表。</p><p>方法二：重新创建一个同名字的列表覆盖。<br>   答：<br>        member=[‘小甲鱼’,’黑夜’,’迷途’,’怡静’,’秋舞斜阳’]<br>        member.insert(1, 88)<br>        member.insert(3, 90)<br>        member.insert(5, 85)<br>        member.insert(7, 90)<br>        member.append(88)</p><ol><li><p>利用 for 循环打印上边 member 列表中的每个内容<br>member = [‘小甲鱼’, 88, ‘黑夜’, 90, ‘迷途’, 85, ‘怡静’, 90, ‘秋舞斜阳’, 88]<br>答：</p><pre><code>for i in member:print(i)</code></pre></li><li><p>上一题打印的样式不是很好，能不能修改一下代码<br>答：</p><pre><code>member = [&apos;小甲鱼&apos;, 88, &apos;黑夜&apos;, 90, &apos;迷途&apos;, 85, &apos;怡静&apos;, 90, &apos;秋舞斜阳&apos;, 88]l=len(member)count=0while count&lt;l:    print(member[count],member[count+1])    count+=2</code></pre></li></ol><pre><code>member = [&apos;小甲鱼&apos;, 88, &apos;黑夜&apos;, 90, &apos;迷途&apos;, 85, &apos;怡静&apos;, 90, &apos;秋舞斜阳&apos;, 88]for each in range(len(member)):    if each%2==0:        print(member[each],member[each+1])判断i是否是偶数如果i是偶数，i%2==0 返回du1（true），执行zhiif后面语句，dao如果i不是偶数，i%2==0返回0（false），跳过if后面语句，执行else if或者else语句。</code></pre><p>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////<br>【打了激素的数组2】<br>0. 下边的列表分片操作会打印什么内容？<br>    list1 = [1, 3, 2, 9, 7, 8]<br>    list1[2:5]<br>    答：2，9，7</p><ol><li><p>请问 list1[0] 和 list1[0:1] 一样吗？<br>答:list[0]输出是一个数值，list[0:1]是个数组</p></li><li><p>如果你每次想从列表的末尾取出一个元素，并将这个元素插入到列表的最前边，你会怎么做？<br>答：s=list.pop()<br>   list.insert(0,s);</p></li><li><p>有些鱼油比较调皮，他说我想试试 list1[-3:-1] 会不会报错，怎么知道一试居然显示 [9, 7]，这是怎么回事呢？<br>答：数组0号位的-3就是倒数第三位………….  </p></li><li><p>在进行分片的时候，我们知道分片的开始和结束位置需要进行指定，但其实还有另外一个隐藏的设置：步长。<br>在普通的分片操作中，步长默认设置为1，表示逐个遍历元素。其实我们可以人为调整步长以达到不可告人的秘密。<br>list1[0:6:2]<br>[1, 2, 7]<br>答：0到6，0到2结果为[1,2,7]也可以写作list[::2]</p></li><li><p>课堂上小甲鱼说可以利用分片完成列表的拷贝 list2 = list1[:]，那事实上可不可以直接写成 list2 = list1 更加简洁呢？<br>答：不可以，因为list[:]是拷贝整篇数组的意思，list直接等于再修改的话会改变两个数组的值</p></li></ol><p>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////<br>【打了激素的数组3】<br>0. 注意，这道题跟上节课的那道题有点儿不同，回答完请上机实验或参考答案。</p><blockquote><blockquote><blockquote><p>old = [1, 2, 3, 4, 5]<br>new = old<br>old = [6]<br>print(new)<br>如果不上机操作，你觉得会打印什么内容？<br>答：打印[1,2,3,4,5]，因为old重新指向了一个新数组，而new指向了继承原old的数组</p></blockquote></blockquote></blockquote><ol><li>请问如何将下边这个列表的’小甲鱼’修改为’小鱿鱼’？</li></ol><p>list1 = [1, [1, 2, [‘小甲鱼’]], 3, 5, 8, 13, 18]<br>答：list1[1][2][0]=’小鱿鱼’</p><ol start="2"><li><p>要对一个列表进行顺序排序，请问使用什么方法？<br>答：sort()方法</p></li><li><p>要对一个列表进行逆序排序，请问使用什么方法？<br>答：sort(reverse=True)方法</p></li><li><p>列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy() 和 clear()<br>答：s=new.copy()…….使用方法类似与s=new[:]都是直接复制整个数组而不是指向它</p></li><li><p>你有听说过列表推导式或列表解析吗？</p></li></ol><p>没听过？！没关系，我们现场来学习一下吧，看表达式：</p><blockquote><blockquote><blockquote><p>[ i*i for i in range(10) ]</p></blockquote></blockquote></blockquote><p>你觉得会打印什么内容？</p><blockquote><blockquote><blockquote><p>[i*i for i in range(10)]<br>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p></blockquote></blockquote></blockquote><p>居然分别打印了0到9各个数的平方，然后还放在列表里边了有木有？！<br>列表推导式（List comprehensions）也叫列表解析，灵感取自函数式编程语言 Haskell。Ta 是一个非常有用和灵活的工具，可以用来动态的创建列表，语法如：<br>[有关A的表达式 for A in B]<br>例如</p><blockquote><blockquote><blockquote><p>list1 = [x**2 for x in range(10)]<br>list1<br>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p></blockquote></blockquote></blockquote><p>相当于</p><p>list1 = []<br>for x in range(10):<br>    list1.append(x**2)</p><p>问题：请先在 IDLE 中获得下边列表的结果，并按照上方例子把列表推导式还原出来。</p><blockquote><blockquote><blockquote><p>list1 = [(x, y) for x in range(10) for y in range(10) if x%2==0 if y%2!=0]<br>答：lits1=[]<br>    for x in range(10):<br>        for y in range(10):<br>            if x%2==0:<br>              if y%2 != 0</p></blockquote></blockquote></blockquote><p>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////<br>0. 请用一句话描述什么是列表？再用一句话描述什么是元组？</p><p>列表：一个大仓库，你可以随时往里边添加和删除任何东西。</p><p>元组：封闭的列表，一旦定义，就不可改变（不能添加、删除或修改）。</p><ol><li>什么情况下你需要使用元组而不是列表？</li></ol><p>当我们希望内容不被轻易改写的时候，我们使用元组（把权力关进牢笼）。</p><p>当我们需要频繁修改数据，我们使用列表。</p><ol start="2"><li>当元组和列表掉下水，你会救谁？</li></ol><p>如果是我，我会救列表，因为列表提供了比元组更丰富的内置方法，这相当大的提高了编程的灵活性。</p><p>回头来看下元组，元组固然安全，但元组一定创建就无法修改（除非通过新建一个元组来间接修改，但这就带来了消耗），而我们人是经常摇摆不定的，所以元组只有在特殊的情况才用到，平时还是列表用的多。</p><p>综上所述，小甲鱼会救列表（列表是美眉）。</p><ol start="3"><li>请将左边列表的内置方法与右边的注释连线，并圈出元组可以使用的方法。</li></ol><p>看吧，元组果然比较悲剧吧，仅有两个方法元组可以使用，其他方法都不行，不信你试试？</p><ol start="4"><li>创建一个元组，什么情况下逗号和小括号必须同时存在，缺一不可？</li></ol><p>在拼接只有一个元素的元组的时候，例如我们课上举的例题：</p><blockquote><blockquote><blockquote><p>temp = (‘小甲鱼’, ‘黑夜’, ‘迷途’, ‘小布丁’)</p></blockquote></blockquote></blockquote><h1 id="如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该："><a href="#如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该：" class="headerlink" title="如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该："></a>如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该：</h1><blockquote><blockquote><blockquote><p>temp = temp[:2] + (‘怡静’,) + temp[2:]</p></blockquote></blockquote></blockquote><ol start="5"><li>x, y, z = 1, 2, 3 请问x, y, z是元组吗？</li></ol><p>所有的多对象的、逗号分隔的、没有明确用符号定义的这些集合默认的类型都是元组，自己在IDLE中键入以下代码，并体会一下：</p><blockquote><blockquote><blockquote><p>x, y, z = 1, 2, 3</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>type(x)</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>h = x, y, z</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>type(h)<br>复制代码</p></blockquote></blockquote></blockquote><ol start="6"><li>请写出以下情景中应该使用列表还是元组来保存数据：</li></ol><p>1) 游戏中角色的属性：列表</p><p>2) 你的身份证信息：元组</p><p>3) 论坛的会员：列表</p><p>4) 团队合作开发程序，传递给一个你并不了解具体实现的函数的参数：元组</p><p>5) 航天火箭各个组件的具体配置参数：元组</p><p>6) NASA系统中记录已经发现的行星数据：列表</p><ol start="7"><li>上节课我们通过课后作业的形式学习到了“列表推导式”，那请问如果我把中括号改为小括号，会不会得到“元组推导式”呢？自己动手试试看再看答案哦^_^</li></ol><p>Python3 木有“元组推导式”，为嘛？没必要丫，有了“列表推导式”已经足够了。</p><p>那为什么“&gt;&gt;&gt; tuple1 = (x**2 for x in range(10))”不会报错？</p><p>因为你误打误撞得到了一个生成器：</p><blockquote><blockquote><blockquote><p>type(tuple1)<br>&lt;class ‘generator’&gt;</p></blockquote></blockquote></blockquote><p>关于生成器的概念小甲鱼今后会细讲，你可以尝试这么去访问我们刚刚的生成器：</p><h1 id="注意，Python3-开始-next-方法改为-next-哦"><a href="#注意，Python3-开始-next-方法改为-next-哦" class="headerlink" title="注意，Python3 开始 next() 方法改为 next() 哦~"></a>注意，Python3 开始 next() 方法改为 <strong>next</strong>() 哦~</h1><blockquote><blockquote><blockquote><p>tuple1.<strong>next</strong>()<br>0<br>tuple1.<strong>next</strong>()<br>1<br>tuple1.<strong>next</strong>()<br>4<br>tuple1.<strong>next</strong>()<br>9<br>tuple1.<strong>next</strong>()<br>16<br>tuple1.<strong>next</strong>()<br>25<br>tuple1.<strong>next</strong>()<br>36<br>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</p></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////&lt;br&gt;【打激素的数组 1
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
